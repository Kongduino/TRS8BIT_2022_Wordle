	ORG 0xF06E
MAIN:	CALL CLS
	MVI A,17
	MVI B,1
	CALL CURSOR
	LXI H, GREET
	CALL DISPLAY
	LXI D,0x8000 ; Beginning of the RAM area, normally whatever BASIC program is loaded
	LHLX ; HL = (DE)
GETNUM:	; We have 2312 words, so biggest number allowed is 0x0907, 2311
	; MOV A,H
	; CPI 0x09
	; JM GETNUM0
	; MOV A,L
	; CPI 0x07
	; JM GETNUM0
	; LXI H,0
	; PUSH H
	; ===================
	; for now limit to 256 words
	MVI H,0
GETNUM0:	POP H
	INX H ; increment HL
	PUSH H
	CALL KYREAD
	JZ GETNUM
	POP H
	; crude random number generator
	; We have only 5 blocks...
	; Limit the number to 0-31
	; TEMPORARY!
	; =========================
	MOV A,L
	MVI H,0
	ANI 0x1F
	MOV L,A ; HL = 0-31
	; =========================
	LXI D,WORDNUM
	SHLX ; (DE) = HL Save the number
	MVI A,1
	MVI B,3
	CALL CURSOR
	LXI H,ITEMN
	CALL DISPLAY
	LXI D,WORDNUM
	LHLX ; HL = (DE)
	CALL PRTINT
	MVI A,15
	MVI B,3
	CALL CURSOR
	LXI H,BLOCKN
	CALL DISPLAY
	LXI D,WORDNUM
	LHLX ; HL = (DE)
	ARHL ; HL = HL / 2
	ARHL ; HL = HL / 2
	ARHL ; HL = HL / 2 ==> divided by 8
	LXI D, BLOCKNUM
	SHLX ; (DE) = HL ; Save the block number for now
	CALL PRTINT
	MVI A,25
	MVI B,3
	CALL CURSOR
	LXI H,INDEXN
	CALL DISPLAY
	; FASTER!
	; =========================
	LXI D,WORDNUM
	LHLX ; HL = (DE)
	MOV A,L ; We only need the lower byte
	ANI 0x07 ; 0b0000111 The last 3 bits are the ones pushed out...
	; during the division by 8
	; There's our modulo 8 function :-)
	PUSH PSW
	MOV L,A
	MVI H,0
	CALL PRTINT
	MVI A,1
	MVI B,4
	CALL CURSOR
	LXI H,INDEXB
	CALL DISPLAY
	POP PSW
	CPI 0
	JZ SKIP00 ; if index is 0 skip
	PUSH PSW
	MVI A,0x23
	CALL LCD
	POP PSW
	MOV B,A
	ADD B ; block offset calculation *is* 8-bit
	ADD B
	ADD B
	ADD B ; A = A * 5
SKIP00:	MOV L,A
	MVI H,0
	PUSH PSW
	LXI D,OFFSET
	SHLX ; (DE) = HL Save the offset
	CALL PRTINT ; print the word offset
	MVI A,0x5D
	CALL LCD ; ]
	MVI A,32
	CALL LCD ; and a space
	; CALL CHGET
	LXI D, BLOCKNUM
	LHLX ; Retrieve the block number
	MOV B, H
	MOV C, L ; HL is 3 ---> multiply by 5
	DAD B ; HL is 6
	DAD B ; HL is 9
	DAD B ; HL is 12
	DAD B ; HL is 15
	MOV B, H
	MOV C, L ; BC and HL are 15 ---> multiply by 5 again
	DAD B ; HL is 30
	DAD B ; HL is 45
	DAD B ; HL is 60
	DAD B ; HL is 75: HL = HL * 25
	LXI D,DICTIX
	SHLX ; (DE) = HL Save DICT offset
	; MVI A,1
	; MVI B,3
	; CALL CURSOR
	; CALL PRTINT ; and display
	LXI B,DICT
	LXI D,DICTIX
	LHLX ; Get DICT offset
	DAD B ; calculate the address within DICT
	; HL = DICT + (DICTIX)
	SHLX ; (DE) = HL Save DICT offset
	LXI D,BUFFER
	MVI A,5 ; 5 times 5 bytes --> 40 bytes
LOOP00:	PUSH PSW
	MOV A,M
	RRC
	RRC
	RRC ; >> 3
	ANI 0x1F ; BYTE 0 0b00011111
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A ; store into BUFFER
	INX H
	XCHG
	MOV A,M
	RLC
	RLC ; << 2
	ANI 0x1C ; 0b00011100
	MOV B,A
	INX H
	MOV A,M
	RRC
	RRC
	RRC
	RRC
	RRC
	RRC ; >> 6
	ANI 0x03 ; 0b00000011
	ADD B ; BYTE 1
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG ; this block should probably be a function call to save a couple of bytes
	MOV A,M
	RRC ; >> 1
	ANI 0x1F ; 0b00011111
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A ; BYTE 2
	INX H
	XCHG
	MOV A,M
	RLC
	RLC
	RLC
	RLC
	ANI 0x10 ; 0b00010000
	MOV B,A
	INX H
	MOV A,M
	RRC
	RRC
	RRC
	RRC
	ANI 0x0F ; 0b00001111
	ADD B ; BYTE 3
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG
	MOV A,M
	RLC
	ANI 0x1E ; 0b00011110
	MOV B,A
	INX H
	MOV A,M
	CPI 128 ; If 1st bit of next byte, ie last byte of this word, is 0 leave it as is
	JM LOOP01
	MOV A,B
	INR A ; Add 1 ie set bit 0
	JP LOOP02
LOOP01:	MOV A,B ; BYTE 4
LOOP02:	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG
	MOV A,M
	RRC
	RRC
	ANI 0x1F ; 0b00011111 BYTE 5
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG
	MOV A,M
	RLC
	RLC
	RLC
	ANI 0x18
	MOV B,A
	INX H
	MOV A,M
	RRC
	RRC
	RRC
	RRC
	RRC
	ANI 0x07 ; 0b00000111
	ADD B ; BYTE 6
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG
	MOV A,M
	ANI 0x1F ; 0b00011111 BYTE 7
	ADI 0x41 ; 0-25 --> 0x41-0x5A
	XCHG ; Exchange HL with DE
	MOV M,A
	INX H
	XCHG ; now we have 8 bytes in the BUFFER
	INX H ; increment DICT pointer

	POP PSW ; counter 5 --> 0
	DCR A
	CPI 0
	JNZ LOOP00 ; loop 5 times
	
	MVI A,1
	MVI B,6
	CALL CURSOR
	LXI H,BUFFER
	CALL DISPLAY
	MVI A,1
	MVI B,7
	CALL CURSOR
	LXI B,BUFFER
	LXI D,OFFSET
	LHLX ; Get block offset
	DAD B ; HL = BUFFER + (OFFSET)
	MOV A,M
	CALL LCD
	INX H
	MOV A,M
	CALL LCD
	INX H
	MOV A,M
	CALL LCD
	INX H
	MOV A,M
	CALL LCD
	INX H
	MOV A,M
	CALL LCD ; display 5 chars

	CALL CHGET
	CPI 'Q
	JZ MENU
	CPI 'q
	JZ MENU
	JMP MAIN

CURSOR:	; a = x. b = y
	PUSH H ; preserve HL
	LXI H, CSRX
	MOV M, A
	LXI H, CSRY
	MOV M, B ; cursor X, Y
	POP H ; retrieve HL
	RET

HEX2ASC: ; IN: A = BYTE
	PUSH H ; preserve HL
	PUSH PSW ; preserve A for now
	RRC
	RRC
	RRC
	RRC ; A >> 4
	ANI 0x0F ; & 0b00001111
	ADI 0x30 ; Add 0x30 for '0' to '9'
	CPI 0x3A
	JM HEX2ASC0
	ADI 7 ; add 7 extra for 'A' to 'F'
HEX2ASC0:	CALL LCD ; display first char
	POP PSW ; retrieve A
	ANI 0x0F ; same thing on lower nibble
	ADI 0x30
	CPI 0x3A
	JM HEX2ASC1
	ADI 7
HEX2ASC1:	CALL LCD
	POP H ; retrieve HL
	RET

DICT:	; 256 words
; TANDYRADIOSHACKEIGHTMICROMODELTHREESUSHI
	DB 152, 26, 60, 68, 3
	DB 67, 164, 112, 9, 68
	DB 65, 143, 54, 32, 81
	DB 115, 28, 50, 46, 103
	DB 137, 9, 42, 72, 232
; SPEARWOOERBRIBEDYINGQUEENPOLYPFINALMUSHY
	DB 147, 200, 8, 217, 206
	DB 36, 67, 20, 4, 131
	DB 194, 26, 104, 80, 132
	DB 107, 220, 188, 60, 168
	DB 104, 22, 202, 72, 248
; REPLYGRAINBRUSHMETROGRAFTRIDERSMARTSTAID
	DB 137, 30, 188, 26, 32
	DB 67, 67, 26, 72, 236
	DB 36, 226, 227, 68, 5
	DB 156, 80, 50, 70, 76
	DB 4, 103, 41, 129, 3
; FEMMEHASTYWIDERROCKYSLOPEWEIRDRABBIFUDGE
	DB 41, 24, 194, 28, 18
	DB 158, 44, 129, 146, 49
	DB 112, 149, 137, 45, 207
	DB 37, 136, 136, 142, 32
	DB 8, 80, 90, 12, 196
; SONARBELCHCRAMPGRANDSLINKGNOMEEXTRAJOINT
	DB 147, 154, 8, 132, 139
	DB 17, 197, 16, 49, 230
	DB 136, 26, 57, 45, 13
	DB 81, 154, 230, 16, 151
	DB 156, 64, 151, 33, 179
; IMBUETHROWCOCOAAPRONGLINTPIXIESAFERINGOT
	DB 67, 3, 66, 76, 241
	DB 117, 132, 225, 56, 0
	DB 124, 92, 211, 45, 13
	DB 155, 209, 116, 18, 64
	DB 41, 34, 134, 153, 211
; UDDERWOOZYFILMYSWOONBLAZEBRAINSKUNKDECOY
	DB 160, 198, 72, 217, 206
	DB 206, 10, 133, 179, 18
	DB 179, 156, 208, 172, 25
	DB 32, 98, 4, 54, 74
	DB 163, 84, 50, 9, 216
; PUREESLIDERAINYFLOSSEMCEEWAVERVITALABOUT
	DB 125, 34, 66, 73, 104
	DB 25, 34, 4, 55, 5
	DB 91, 165, 34, 48, 68
	DB 37, 129, 82, 70, 168
	DB 152, 22, 0, 186, 147
; STAVEELATECRUDETRIEDSALONTASTYBLEATROBIN
	DB 148, 193, 82, 17, 96
	DB 153, 5, 26, 12, 147
	DB 138, 8, 57, 1, 110
	DB 108, 193, 41, 224, 43
	DB 32, 39, 23, 5, 13
; GAUNTWASTECIGARFORCESUITEREFERRELAXTRAIT
	DB 48, 40, 217, 216, 18
	DB 153, 4, 131, 2, 37
	DB 116, 68, 73, 81, 19
	DB 36, 72, 82, 70, 36
	DB 88, 47, 56, 129, 19
; WHINEVIPERLOWERPASTYWHIRLLAUGHWRUNGBEVEL
	DB 177, 208, 210, 85, 15
	DB 36, 86, 235, 18, 47
	DB 4, 167, 139, 29, 17
	DB 90, 193, 67, 30, 209
	DB 163, 76, 18, 84, 139
; PRIORGROPECURVEADOBEDUCHYREGALWHILENORTH
	DB 124, 80, 232, 154, 46
	DB 121, 5, 72, 212, 128
	DB 27, 130, 65, 208, 71
	DB 196, 72, 96, 46, 199
	DB 66, 200, 215, 70, 103
; QUACKABUSEPUSHYREALMMOODYBRAIDGUILTPUPIL
	DB 133, 0, 37, 0, 52
	DB 145, 31, 73, 31, 17
	DB 32, 22, 198, 57, 195
	DB 192, 98, 4, 12, 212
	DB 66, 230, 250, 61, 11
; BIOMEANTICDEFERREBARLORRYPOESYHANDYSUPER
	DB 10, 28, 194, 1, 179
	DB 64, 134, 66, 146, 49
	DB 32, 65, 21, 186, 49
	DB 195, 220, 73, 96, 224
	DB 104, 241, 42, 60, 145
; AROSEALOFTCOMETFLOODBUTCHSAVVYDRYERDROWN
	DB 4, 93, 34, 1, 110
	DB 44, 196, 230, 18, 101
	DB 91, 156, 48, 210, 98
	DB 60, 129, 90, 224, 113
	DB 193, 34, 56, 186, 205
; SIEGEARENABLIMPFURRYDIVERHUMORTAKERSTAND
	DB 146, 8, 98, 2, 36
	DB 104, 2, 180, 49, 229
	DB 164, 99, 129, 162, 164
	DB 137, 232, 199, 70, 96
	DB 81, 35, 41, 129, 163
; ROGERTRUSTIDLERMATCHSPOKEFELLABRISKCREED
	DB 139, 140, 72, 206, 52
	DB 148, 208, 53, 146, 44
	DB 4, 196, 121, 61, 202
	DB 33, 72, 181, 128, 49
	DB 68, 148, 40, 144, 131
; EATERFIFTHFOLIOICILYCLERKBULLYRATIOBUGLE
	DB 32, 38, 72, 149, 5
	DB 153, 202, 229, 161, 200
	DB 18, 23, 129, 44, 145
	DB 80, 104, 181, 226, 32
	DB 154, 28, 26, 25, 100
; SLATESHALTGROWLSPRAYBUDDYBACONANKLEOPTIC
	DB 146, 193, 50, 72, 224
	DB 92, 205, 23, 89, 114
	DB 124, 65, 128, 208, 99
	DB 192, 64, 39, 52, 13
	DB 82, 200, 231, 205, 2
; ACUTEGLAZEAXIALREADYSTOODANGRYROUSECLANK
	DB 0, 169, 50, 25, 96
	DB 201, 1, 116, 1, 113
	DB 32, 7, 137, 77, 206
	DB 24, 26, 104, 226, 46
	DB 164, 136, 37, 129, 170
; CANDYWAISTVINYLBEACHRATTYGONADCRAZYSILKY
	DB 16, 26, 60, 88, 8
	DB 148, 234, 134, 225, 97
	DB 32, 4, 120, 130, 115
	DB 193, 156, 208, 12, 81
	DB 6, 113, 36, 45, 88
; LARGEDINGYPRAWNCRONESLEPTMAUVESPANKAPPLE
	DB 88, 34, 98, 13, 13
	DB 54, 31, 16, 89, 162
	DB 139, 154, 73, 44, 143
	DB 155, 1, 74, 146, 79
	DB 3, 84, 7, 189, 100
; COVETVOWELJETTYSLANTSONICTWEEDMAIZERERUN
	DB 19, 170, 73, 213, 214
	DB 34, 210, 73, 207, 18
	DB 88, 27, 57, 57, 168
	DB 20, 236, 66, 13, 128
	DB 70, 73, 18, 70, 141
; GHOULPADDYJIFFYCOUGHPALSYAUDIOSHINYLATER
	DB 49, 221, 69, 188, 3
	DB 30, 18, 130, 151, 2
	DB 117, 12, 119, 129, 114
	DB 192, 40, 52, 58, 71
	DB 67, 112, 176, 76, 145
; DRILLSOLVESOGGYVERSOSQUATBESETTAROTSPERM
	DB 28, 80, 181, 201, 203
	DB 169, 36, 227, 27, 21
	DB 36, 100, 233, 66, 128
	DB 152, 73, 34, 78, 96
	DB 139, 167, 39, 146, 44
; PATTYDRANKGEEKYROUTESPICYMAYBEMYRRHPLUCK
	DB 120, 39, 60, 14, 32
	DB 106, 140, 66, 43, 17
	DB 117, 38, 73, 61, 2
	DB 195, 1, 128, 145, 152
	DB 140, 78, 245, 208, 74
; WORSESULLYMERCYEDIFYYIELDLOFTYDISCOSPELT
	DB 179, 163, 34, 74, 139
	DB 94, 24, 72, 139, 4
	DB 26, 11, 140, 32, 139
	DB 26, 220, 89, 224, 104
	DB 144, 157, 39, 145, 115
; ALIENQUALMQUIETDONORGUESTWELSHDRINKJUNTO
	DB 2, 208, 70, 194, 128
	DB 91, 33, 68, 18, 99
	DB 115, 93, 19, 80, 146
	DB 157, 136, 185, 28, 113
	DB 67, 84, 154, 54, 110
; MANICGOOEYCINCHRASPYENEMAHUMUSAVIANELITE
	DB 96, 26, 129, 25, 206
	DB 38, 4, 134, 136, 241
	DB 4, 159, 130, 52, 140
	DB 1, 232, 202, 72, 21
	DB 64, 26, 69, 162, 100
; ARBORINTROBROILSCOLDFRILLBLANKCURVYAMUSE
	DB 4, 66, 232, 161, 179
	DB 139, 131, 23, 33, 114
	DB 19, 150, 50, 197, 11
	DB 88, 86, 6, 168, 84
	DB 141, 112, 6, 82, 68
; WIDOWSTAMPPRISMAFTERSPIELLINGOFIBREBIGOT
	DB 178, 6, 235, 74, 96
	DB 99, 223, 20, 73, 128
	DB 44, 201, 25, 61, 4
	DB 90, 208, 211, 56, 168
	DB 12, 72, 20, 25, 211
; CRIEDPRIVYGLOSSPROUDSATINKIOSKPENNYWORTH
	DB 20, 80, 65, 190, 40
	DB 174, 12, 183, 74, 79
	DB 139, 168, 57, 2, 104
	DB 106, 144, 233, 41, 228
	DB 107, 113, 103, 70, 103

GREET: DS "WORDLE test"
	DB 13,10
	DS "Wait a short while and hit a key..."
	DB 0
ITEMN: DS "Word #"
	DB 0
BLOCKN: DS "Block #"
	DB 0
INDEXN: DS "Index #"
	DB 0
INDEXB: DS "Index Bytes ["
	DB 0
BLOCKIX: DS "Block index "
	DB 0
WORDNUM: DB 27,0
OFFSET: DB 0,0
BLOCKNUM: DB 0,0
DICTIX: DB 0,0

BUFFER:	DB 0,0,0,0,0,0,0,0
	DB 0,0,0,0,0,0,0,0
	DB 0,0,0,0,0,0,0,0
	DB 0,0,0,0,0,0,0,0
	DB 0,0,0,0,0,0,0,0,0
	; 40 bytes + a zero as string terminator for DISPLAY
